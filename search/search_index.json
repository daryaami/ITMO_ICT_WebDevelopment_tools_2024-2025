{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0412\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442","text":"<p>\u0410\u0432\u0442\u043e\u0440: \u041c\u0438\u0442\u0440\u044f\u0448\u043a\u0438\u043d\u0430 \u0414\u0430\u0440\u044c\u044f</p>"},{"location":"#_1","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435","text":"<ul> <li>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI</li> <li>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 2. \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c</li> </ul>"},{"location":"lab1/connections/","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414","text":"<pre><code>from sqlmodel import SQLModel\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqlalchemy.orm import sessionmaker\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\ndb_url = os.getenv('DB_ADMIN')\nengine = create_async_engine(db_url, echo=True)\n\nasync_session = sessionmaker(\n    engine, class_=AsyncSession, expire_on_commit=False\n)\n\nasync def init_db():\n    async with engine.begin() as conn:\n        await conn.run_sync(SQLModel.metadata.create_all)\n\nasync def get_session():\n    async with async_session() as session:\n        yield session\n\nasync def close_db():\n    await engine.dispose()\n</code></pre>"},{"location":"lab1/models/","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0411\u0414","text":""},{"location":"lab1/models/#erd-postgresql","title":"ERD \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 PostgreSQL","text":""},{"location":"lab1/models/#user","title":"User","text":"<pre><code>class UserDefault(SQLModel):\n    name: str\n    email: str\n\nclass User(UserDefault, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True, sa_column_kwargs={\"autoincrement\": True})\n    tasks: List[\"Task\"] = Relationship(back_populates=\"user\")\n    hashed_password: str\n</code></pre>"},{"location":"lab1/models/#category","title":"Category","text":"<pre><code>class CategoryDefault(SQLModel):\n    name: str\n\nclass Category(CategoryDefault, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True, sa_column_kwargs={\"autoincrement\": True})\n    name: str\n    tasks: List[\"Task\"] = Relationship(back_populates=\"categories\", link_model=TaskCategory)\n</code></pre>"},{"location":"lab1/models/#taskcategory","title":"TaskCategory","text":"<pre><code>class TaskCategory(SQLModel, table=True):\n    task_id: int = Field(foreign_key=\"task.id\", primary_key=True)\n    category_id: int = Field(foreign_key=\"category.id\", primary_key=True)\n</code></pre>"},{"location":"lab1/models/#task","title":"Task","text":"<pre><code>class TaskDefault(SQLModel):\n    title: str\n    description: Optional[str] = None\n    due_date: Optional[datetime] = Field(default=None, sa_column=Column(DateTime(timezone=True)))\n    scheduled_datetime: Optional[datetime] = Field(default=None, sa_column=Column(DateTime(timezone=True)))\n    priority: Priority = Priority.medium\n\nclass Task(TaskDefault, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True, sa_column_kwargs={\"autoincrement\": True})\n    user_id: int = Field(foreign_key=\"user.id\")\n    user: User = Relationship(back_populates=\"tasks\")\n    categories: List[Category] = Relationship(back_populates=\"tasks\", link_model=TaskCategory)\n    time_logs: List[\"TaskTimeLog\"] = Relationship(back_populates=\"task\")\n</code></pre>"},{"location":"lab1/models/#tasktimelog","title":"TaskTimeLog","text":"<pre><code>class TaskTimeLogDefault(SQLModel):\n    start_time: datetime = Field(sa_column=Column(DateTime(timezone=True)))\n    end_time: Optional[datetime] = Field(default=datetime.now().astimezone(tz), sa_column=Column(DateTime(timezone=True)))\n\nclass TaskTimeLog(TaskTimeLogDefault, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True, sa_column_kwargs={\"autoincrement\": True})\n    task_id: int = Field(foreign_key=\"task.id\")\n    task: Task = Relationship(back_populates=\"time_logs\")\n    time_spent: float\n</code></pre>"},{"location":"lab1/api/category/","title":"Categories","text":""},{"location":"lab1/api/category/#create-category","title":"Create Category","text":"<p>Endpoint: <code>POST /categories/</code></p> <p>Request Body:</p> <pre><code>{\n  \"name\": \"string\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": {\n    \"name\": \"string\",\n    \"id\": 0\n  }\n}\n</code></pre>"},{"location":"lab1/api/category/#get-categories","title":"Get Categories","text":"<p>Endpoint: <code>GET /categories/</code></p> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": [\n    {\n      \"name\": \"string\",\n      \"id\": 0\n    }\n  ]\n}\n</code></pre>"},{"location":"lab1/api/category/#get-category","title":"Get Category","text":"<p>Endpoint: <code>GET /categories/{category_id}</code></p> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": {\n    \"name\": \"string\",\n    \"id\": 0\n  }\n}\n</code></pre>"},{"location":"lab1/api/category/#update-category","title":"Update Category","text":"<p>Endpoint: <code>PUT /categories/{category_id}</code></p> <p>Request Body:</p> <pre><code>{\n  \"name\": \"string\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": {\n    \"name\": \"string\",\n    \"id\": 0\n  }\n}\n</code></pre>"},{"location":"lab1/api/category/#delete-category","title":"Delete Category","text":"<p>Endpoint: <code>DELETE /categories/{category_id}</code></p> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"message\": \"string\"\n}\n</code></pre>"},{"location":"lab1/api/task/","title":"Tasks","text":""},{"location":"lab1/api/task/#create-task","title":"Create Task","text":"<p>Endpoint: <code>POST /tasks/</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Request Body:</p> <pre><code>{\n  \"title\": \"string\",\n  \"description\": \"string\", //optional\n  \"due_date\": \"2025-03-13T11:18:31.195Z\", //optional\n  \"scheduled_datetime\": \"2025-03-13T11:18:31.195Z\", //optional\n  \"priority\": 2,\n  \"category_ids\": [1, 2]\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": {\n    \"title\": \"string\",\n    \"description\": \"string\",\n    \"due_date\": \"2025-03-13T11:20:34.732Z\",\n    \"scheduled_datetime\": \"2025-03-13T11:20:34.732Z\",\n    \"priority\": 1,\n    \"id\": 0,\n    \"categories\": [\n      {\n        \"name\": \"string\",\n        \"id\": 0\n      }\n    ],\n    \"time_logs\": [\n      {\n        \"start_time\": \"2025-03-13T11:20:34.732Z\",\n        \"end_time\": \"2025-03-13T11:20:23.980852Z\",\n        \"id\": 0,\n        \"task_id\": 0,\n        \"time_spent\": 0\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"lab1/api/task/#get-tasks","title":"Get Tasks","text":"<p>Endpoint: <code>GET /tasks</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": [\n    {\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"due_date\": \"2025-03-13T11:24:34.052Z\",\n      \"scheduled_datetime\": \"2025-03-13T11:24:34.052Z\",\n      \"priority\": 1,\n      \"id\": 0,\n      \"categories\": [\n        {\n          \"name\": \"string\",\n          \"id\": 0\n        }\n      ],\n      \"time_logs\": [\n        {\n          \"start_time\": \"2025-03-13T11:24:34.052Z\",\n          \"end_time\": \"2025-03-13T11:20:23.980852Z\",\n          \"id\": 0,\n          \"task_id\": 0,\n          \"time_spent\": 0\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"lab1/api/task/#get-task","title":"Get Task","text":"<p>Endpoint: <code>GET /tasks/{task_id}</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": {\n    \"title\": \"string\",\n    \"description\": \"string\",\n    \"due_date\": \"2025-03-13T11:23:25.221Z\",\n    \"scheduled_datetime\": \"2025-03-13T11:23:25.221Z\",\n    \"priority\": 1,\n    \"id\": 0,\n    \"categories\": [\n      {\n        \"name\": \"string\",\n        \"id\": 0\n      }\n    ],\n    \"time_logs\": [\n      {\n        \"start_time\": \"2025-03-13T11:23:25.221Z\",\n        \"end_time\": \"2025-03-13T11:20:23.980852Z\",\n        \"id\": 0,\n        \"task_id\": 0,\n        \"time_spent\": 0\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"lab1/api/task/#update-task","title":"Update Task","text":"<p>Endpoint: <code>PUT /tasks/{task_id}</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Request Body:</p> <pre><code>{\n  \"title\": \"string\", //optional\n  \"description\": \"string\", //optional\n  \"due_date\": \"2025-03-13T11:25:46.760Z\", //optional\n  \"scheduled_datetime\": \"2025-03-13T11:25:46.760Z\", //optional\n  \"priority\": 2, //optional\n  \"category_ids\": [1, 2] //optional\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"message\": \"string\"\n}\n</code></pre>"},{"location":"lab1/api/task/#delete-task","title":"Delete Task","text":"<p>Endpoint: <code>DELETE /tasks/{task_id}</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"message\": \"string\"\n}\n</code></pre>"},{"location":"lab1/api/tasktimelog/","title":"Task Time Logs","text":""},{"location":"lab1/api/tasktimelog/#create-task-time-log","title":"Create Task Time Log","text":"<p>Endpoint: <code>POST /tasks/{task_id}/time_logs</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Request Body:</p> <pre><code>{\n  \"start_time\": \"2025-03-14T10:04:38.111Z\",\n  \"end_time\": \"2025-03-14T10:00:58.751272Z\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": {\n    \"start_time\": \"2025-03-14T10:04:38.112Z\",\n    \"end_time\": \"2025-03-14T10:00:58.751272Z\",\n    \"id\": 0,\n    \"task_id\": 0,\n    \"time_spent\": 0\n  }\n}\n</code></pre>"},{"location":"lab1/api/tasktimelog/#update-task-time-log","title":"Update Task Time Log","text":"<p>Endpoint: <code>PUT /tasks/{task_id}/time_logs/{time_log_id}</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Request Body:</p> <pre><code>{\n  \"start_time\": \"2025-03-14T10:06:33.980Z\",\n  \"end_time\": \"2025-03-14T10:00:58.751272Z\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": {\n    \"start_time\": \"2025-03-14T10:04:38.112Z\",\n    \"end_time\": \"2025-03-14T10:00:58.751272Z\",\n    \"id\": 0,\n    \"task_id\": 0,\n    \"time_spent\": 0\n  }\n}\n</code></pre>"},{"location":"lab1/api/tasktimelog/#delete-task-time-log","title":"Delete Task Time Log","text":"<p>Endpoint: <code>DELETE /tasks/{task_id}/time_logs/{time_log_id}</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"message\": \"string\"\n}\n</code></pre>"},{"location":"lab1/api/user/","title":"Users","text":""},{"location":"lab1/api/user/#login-user","title":"Login User","text":"<p>Endpoint: <code>POST /login</code></p> <p>Request Body:</p> <pre><code>{\n  \"username\": \"string\",\n  \"password\": \"string\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"access_token\": \"string\",\n  \"token_type\": \"bearer\"\n}\n</code></pre>"},{"location":"lab1/api/user/#register-user","title":"Register User","text":"<p>Endpoint: <code>POST /register</code></p> <p>Request Body:</p> <pre><code>{\n  \"name\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": {\n    \"name\": \"string\",\n    \"email\": \"string\",\n    \"id\": 0,\n    \"hashed_password\": \"string\"\n  }\n}\n</code></pre>"},{"location":"lab1/api/user/#change-password","title":"Change Password","text":"<p>Endpoint: <code>PUT /change_password</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Request Body:</p> <pre><code>{\n  \"old_password\": \"string\",\n  \"new_password\": \"string\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"message\": \"string\"\n}\n</code></pre>"},{"location":"lab1/api/user/#get-user-info","title":"Get User Info","text":"<p>Endpoint: <code>GET /users/me</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Response:</p> <pre><code>{\n  \"status\": 0,\n  \"data\": {\n    \"name\": \"string\",\n    \"email\": \"string\",\n    \"id\": 0,\n    \"hashed_password\": \"string\"\n  }\n}\n</code></pre>"},{"location":"lab1/api/user/#update-user","title":"Update User","text":"<p>Endpoint: <code>PUT /users/me</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Request Body:</p> <pre><code>{\n  \"name\": \"string\",\n  \"email\": \"string\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": {\n    \"name\": \"string\",\n    \"email\": \"string\",\n    \"id\": 0,\n    \"hashed_password\": \"string\"\n  }\n}\n</code></pre>"},{"location":"lab1/api/user/#delete-user","title":"Delete User","text":"<p>Endpoint: <code>DELETE /users/me</code></p> <p>Authorization: \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f <code>Bearer Token</code>. \u041f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435: <code>Authorization: Bearer {access_token}</code></p> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"message\": \"string\"\n}\n</code></pre>"},{"location":"lab1/api/user/#get-users","title":"Get Users","text":"<p>Endpoint: <code>GET /users</code></p> <p>Response:</p> <pre><code>{\n  \"status\": 0,\n  \"data\": [\n    {\n      \"name\": \"string\",\n      \"email\": \"string\",\n      \"id\": 0,\n      \"hashed_password\": \"string\"\n    }\n  ]\n}\n</code></pre>"},{"location":"lab1/api/user/#get-user","title":"Get User","text":"<p>Endpoint: <code>GET /users/{user_id}</code></p> <p>Response:</p> <pre><code>{\n  \"status\": 200,\n  \"data\": {\n      \"name\": \"string\",\n      \"email\": \"string\",\n      \"id\": 0,\n      \"hashed_password\": \"string\"\n    }\n}\n</code></pre>"},{"location":"lab2/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python","text":""},{"location":"lab2/task1/#_1","title":"\u0417\u0430\u0434\u0430\u0447\u0430","text":"<p>\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0442\u0440\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0432 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439: <code>threading</code>, <code>asyncio</code>, <code>multiprocessing</code>. \u0414\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0430\u0441\u044c \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e (10^9). \u0426\u0435\u043b\u044c \u2014 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0434\u0430\u0451\u0442 \u043f\u0440\u0438\u0440\u043e\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043a\u0430\u043a \u0432\u043b\u0438\u044f\u0435\u0442 GIL.</p>"},{"location":"lab2/task1/#_2","title":"\u041e\u0431\u0437\u043e\u0440","text":"<p>\u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f <code>calculate_sum(start, end)</code>, \u0441\u0447\u0438\u0442\u0430\u044e\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u043b \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 10 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 (\u0438\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044f\u0434\u0435\u0440 CPU) \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e.</p>"},{"location":"lab2/task1/#_3","title":"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f","text":"<pre><code>import time\n\ndef calculate_sum(start, end):\n    print(f\"Calculating: start {start}, end {end}\")\n    total = 0\n    for i in range(start, end):\n        total += i\n    return total\n\ndef main():\n    N = 10**9\n    num_threads = 10\n    results = [0] * num_threads\n\n    for i in range(num_threads):\n        start = i * N // num_threads\n        end = (i + 1) * N // num_threads\n        results.append(calculate_sum(start, end))  \n\n    total_sum = sum(results) + N\n    print(\"Total sum:\", total_sum)\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    main()\n    end_time = time.time()\n    print(f\"Time taken: {end_time - start_time:.2f} seconds\")\n</code></pre> <p>\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: <code>~48.17 \u0441\u0435\u043a</code></p>"},{"location":"lab2/task1/#threading","title":"Threading","text":"<pre><code>import threading\nimport time\n\ndef calculate_sum(start, end, results, index):\n    print(f\"Calculating: start {start}, end {end}\")\n    total = 0\n    for i in range(start, end):\n        total += i\n    results[index] = total\n\ndef main():\n    N = 10**9\n    num_threads = 10\n\n    threads = []\n    results = [0] * num_threads\n\n    for i in range(num_threads):\n        start = i * N // num_threads\n        end = (i + 1) * N // num_threads\n        thread = threading.Thread(target=calculate_sum, args=(start, end, results, i))\n        threads.append(thread)    \n\n    for thread in threads:\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    total_sum = sum(results) + N\n    print(\"Total sum:\", total_sum)\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    main()\n    end_time = time.time()\n    print(f\"Time taken: {end_time - start_time:.2f} seconds\")\n</code></pre> <p>\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: <code>~48.72 \u0441\u0435\u043a</code></p> <p>\u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, \u0438\u0437-\u0437\u0430 GIL \u043f\u043e\u0442\u043e\u043a\u0438 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u044f\u0434\u0440\u0430\u0445.</p>"},{"location":"lab2/task1/#asyncio","title":"AsyncIO","text":"<pre><code>import asyncio\nimport time\n\nasync def calculate_sum(start, end):\n    print(f\"Calculating: start {start}, end {end}\")\n    total = 0\n    for i in range(start, end):\n        total += i\n    return total\n\nasync def main():    \n    N = 10**9\n    num_threads = 10\n\n    tasks = []\n\n    for i in range(num_threads):\n        start = i * N // num_threads\n        end = (i + 1) * N // num_threads\n        task = asyncio.create_task(calculate_sum(start, end))\n        tasks.append(task)\n\n    results = await asyncio.gather(*tasks)\n\n    total_sum = sum(results) + N\n    print(\"Total sum:\", total_sum)\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    asyncio.run(main())\n    end_time = time.time()\n    print(f\"Time taken: {end_time - start_time:.2f} seconds\")\n</code></pre> <p>\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: <code>~48.17 \u0441\u0435\u043a</code></p> <p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>async/await</code>, \u043d\u043e \u043a\u043e\u0434 \u043e\u0441\u0442\u0430\u0451\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u043c.</p>"},{"location":"lab2/task1/#multiprocessing","title":"Multiprocessing","text":"<pre><code>import multiprocessing\nimport time\n\ndef calculate_sum(args):\n    start, end = args\n    print(f\"Calculating: start {start}, end {end}\")\n    total = 0\n    for i in range(start, end):\n        total += i\n    return total\n\ndef main():\n    N = 10**12\n    num_processes = multiprocessing.cpu_count()\n    print(f\"Using {num_processes} processes\")\n\n    chunk_size = N // num_processes\n    ranges = [(i * chunk_size, (i + 1) * chunk_size) for i in range(num_processes)]\n\n    if ranges[-1][1] &lt; N:\n        ranges[-1] = (ranges[-1][0], N)\n\n    with multiprocessing.Pool(processes=num_processes) as pool:\n        results = pool.map(calculate_sum, ranges)\n\n    total_sum = sum(results) + N\n    print(\"Total sum:\", total_sum)\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    main()\n    end_time = time.time()\n    print(f\"Time taken: {end_time - start_time:.2f} seconds\")\n</code></pre> <p>\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: <code>~18.98 \u0441\u0435\u043a</code></p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u043e \u0441\u0432\u043e\u0438\u043c GIL, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443.</p>"},{"location":"lab2/task1/#_4","title":"\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430","text":"\u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f (\u0441\u0435\u043a) \u0420\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c \u0411\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442\u0441\u044f GIL <code>test.py</code> (\u043e\u0434\u0438\u043d \u043f\u043e\u0442\u043e\u043a) ~48.17 \u274c \u041d\u0435\u0442 \u2705 \u0414\u0430 <code>threading</code> ~48.72 \u274c \u041d\u0435\u0442 (GIL) \u2705 \u0414\u0430 <code>asyncio</code> ~48.17 \u274c \u041d\u0435\u0442 (\u043e\u0434\u0438\u043d \u043f\u043e\u0442\u043e\u043a) \u2705 \u0414\u0430 <code>multiprocessing</code> ~18.98 \u2705 \u0414\u0430 \u274c \u041d\u0435\u0442"},{"location":"lab2/task1/#_5","title":"\u0412\u044b\u0432\u043e\u0434","text":"<ul> <li>\u0414\u043b\u044f CPU-\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 (\u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043f\u043e\u0434\u0441\u0447\u0451\u0442 \u0441\u0443\u043c\u043c\u044b, \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0442.\u043f.) \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e <code>multiprocessing</code>.</li> <li>GIL \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c \u0432 <code>threading</code> \u0438 <code>asyncio</code>.</li> <li><code>asyncio</code> \u0438 <code>threading</code> \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447: \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0438 \u0442.\u043f.</li> </ul>"},{"location":"lab2/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445","text":""},{"location":"lab2/task2/#_1","title":"\u0417\u0430\u0434\u0430\u0447\u0430","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"lab2/task2/#_2","title":"\u041e\u0431\u0437\u043e\u0440","text":"<p>\u0412 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u043b\u0438\u0441\u044c \u0447\u0435\u0442\u044b\u0440\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0443 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443:</p> <ul> <li><code>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439</code></li> <li><code>Threading</code></li> <li><code>AsyncIO</code></li> <li><code>Multiprocessing</code></li> </ul> <p>\u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f <code>parse_and_save()</code>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 html \u0441 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0438\u0445 \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u0441\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u0430\u0440\u0441\u0438\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0435 20 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u201cNewest\u201d \u043d\u0430 StackOverflow, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044f:</p> <p><code>title</code> \u2014 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0432\u043e\u043f\u0440\u043e\u0441\u0430</p> <p><code>description</code> \u2014 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 (excerpt)</p> <p><code>category</code> \u2014 \u201cAnswered\u201d / \u201cUnanswered\u201d \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u0432</p>"},{"location":"lab2/task2/#_3","title":"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f","text":"<pre><code>def parse_and_save(url, session):\n    \"\"\"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043f\u0430\u0440\u0441\u0438\u043c \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    resp = requests.get(url, headers={\"User-Agent\": \"Mozilla/5.0\"})\n    soup = BeautifulSoup(resp.text, \"html.parser\")\n    questions = soup.select(\".s-post-summary\")\n\n    for q in questions:\n        # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n        title_tag = q.select_one(\".s-post-summary--content-title\")\n        desc_tag   = q.select_one(\".s-post-summary--content-excerpt\")\n        title       = title_tag.text.strip() if title_tag else \"\u0411\u0435\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\"\n        description = desc_tag.text.strip()  if desc_tag  else \"\u0411\u0435\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\"\n\n        # \u0427\u0438\u0441\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n        stats_block = q.select_one(\".s-post-summary--stats-item\")\n        num_tag     = stats_block.select_one(\".s-post-summary--stats-item-number\") if stats_block else None\n        num_answers = int(num_tag.text.strip()) if num_tag and num_tag.text.strip().isdigit() else 0\n\n        # \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e\n        cat_name = \"Answered\" if num_answers &gt; 0 else \"Unanswered\"\n        category = session.query(Category).filter_by(name=cat_name).first()\n\n        # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443\n        task = Task(title=title, description=description, user_id=1)\n        task.categories.append(category)\n        session.add(task)\n        session.commit()\n\n        print(f\"[SYNC] {title} \u2192 {cat_name}\")\n\ndef main():\n    pages = 20\n    urls = [f\"https://stackoverflow.com/questions?tab=newest&amp;page={i}\" for i in range(1, pages+1)]\n\n    session = SessionLocal()\n    start = time()\n\n    for url in urls:\n        parse_and_save(url, session)\n\n    session.close()\n    total = time() - start\n    print(f\"[SYNC] \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {total:.2f} \u0441\u0435\u043a\u0443\u043d\u0434\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043e\u0447\u0435\u0440\u0451\u0434\u043d\u043e, \u0431\u0435\u0437 \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</p> <p>\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: <code>21.37 \u0441\u0435\u043a\u0443\u043d\u0434</code></p>"},{"location":"lab2/task2/#threading","title":"Threading","text":"<pre><code>def parse_and_save(url):\n    session = SessionLocal()\n    resp = requests.get(url, headers={\"User-Agent\": \"Mozilla/5.0\"})\n    soup = BeautifulSoup(resp.text, \"html.parser\")\n    questions = soup.select(\".s-post-summary\")\n\n    for q in questions:\n        title_tag = q.select_one(\".s-post-summary--content-title\")\n        desc_tag  = q.select_one(\".s-post-summary--content-excerpt\")\n        title  = title_tag.text.strip() if title_tag else \"\u0411\u0435\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\"\n        descr  = desc_tag.text.strip()  if desc_tag  else \"\u0411\u0435\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\"\n\n        answers_block = q.select_one(\".s-post-summary--stats-item\")\n        num_tag = answers_block.select_one(\".s-post-summary--stats-item-number\") if answers_block else None\n        num = int(num_tag.text.strip()) if num_tag and num_tag.text.strip().isdigit() else 0\n\n        category_name = \"Answered\" if num &gt; 0 else \"Unanswered\"\n        category = session.query(Category).filter_by(name=category_name).first()\n\n        task = Task(title=title, description=descr, user_id=1)\n        task.categories.append(category)\n        session.add(task)\n        session.commit()\n        print(f\"[THREAD] {title} \u2192 {category_name}\")\n\n    session.close()\n\ndef main():\n    init_db_and_categories()\n    pages = 20\n    urls = [f\"https://stackoverflow.com/questions?tab=newest&amp;page={i}\" for i in range(1, pages+1)]\n\n    start = time()\n    threads = []\n    for url in urls:\n        t = threading.Thread(target=parse_and_save, args=(url,))\n        t.start()\n        threads.append(t)\n    for t in threads:\n        t.join()\n    print(f\"[THREAD] \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time() - start:.2f} \u0441\u0435\u043a\u0443\u043d\u0434\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e URL \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0441\u0432\u043e\u0439 \u043f\u043e\u0442\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 requests \u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 Session.</p> <p>\u0427\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442: </p> <ul> <li>\u041f\u043e\u0442\u043e\u043a\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0447\u0442\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e, \u043d\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 GIL \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 Python-\u043a\u043e\u0434\u0430.</li> <li>HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0442 \u043f\u043e\u0442\u043e\u043a, \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u044f GIL, \u043d\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0441\u043d\u043e\u0432\u0430 \u043a\u043e\u043d\u043a\u0443\u0440\u0438\u0440\u0443\u044e\u0442 \u0437\u0430 \u043d\u0435\u0433\u043e.</li> </ul> <p>\u041f\u043b\u044e\u0441\u044b: </p> <ul> <li>\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430.</li> </ul> <p>\u041c\u0438\u043d\u0443\u0441\u044b:</p> <ul> <li>O\u0432\u0435\u0440\u00ad\u0445\u0435\u0434 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435/\u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0442\u043e\u043a\u043e\u0432.</li> <li>GIL \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u0440\u043e\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</li> </ul> <p>\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: <code>20.34 \u0441\u0435\u043a\u0443\u043d\u0434</code></p>"},{"location":"lab2/task2/#asyncio","title":"AsyncIO","text":"<pre><code>async def fetch(session, url):\n    async with session.get(url) as response:\n        return await response.text()\n\nasync def parse_and_save(url):\n    async with aiohttp.ClientSession() as http_session:\n        html = await fetch(http_session, url)\n        soup = BeautifulSoup(html, 'html.parser')\n        questions = soup.select(\".s-post-summary\")\n\n        async for session in get_session():\n            for q in questions:\n                title_tag = q.select_one(\".s-post-summary--content-title\")\n                desc_tag  = q.select_one(\".s-post-summary--content-excerpt\")\n                title  = title_tag.text.strip() if title_tag else \"\u0411\u0435\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\"\n                descr  = desc_tag.text.strip()  if desc_tag  else \"\u0411\u0435\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\"\n\n                answers_block = q.select_one(\".s-post-summary--stats-item\")\n                num_tag = answers_block.select_one(\".s-post-summary--stats-item-number\") if answers_block else None\n                num = int(num_tag.text.strip()) if num_tag and num_tag.text.strip().isdigit() else 0\n\n                category_name = \"Answered\" if num &gt; 0 else \"Unanswered\"\n                category = (await session.execute(select(Category).where(Category.name == category_name))).scalar_one_or_none()\n\n                task = Task(title=title, description=descr, user_id=1, categories=[category])\n                session.add(task)\n                await session.commit()\n                await session.refresh(task)\n\n                print(f\"[ASYNC] {title} \u2192 {category_name}\")\n\n            session.close()\n\nasync def main():\n    pages = 20\n    urls = [f\"https://stackoverflow.com/questions?tab=newest&amp;page={i}\" for i in range(1, pages + 1)]\n    await init_db()\n    await init_categories()\n\n    start = time()\n\n    await asyncio.gather(*(parse_and_save(url) for url in urls))\n\n    print(f\"[ASYNC] \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time() - start:.2f} \u0441\u0435\u043a\u0443\u043d\u0434\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u0412\u0441\u0451 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435. HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>aiohttp</code>, \u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u043f\u0438\u0448\u0443\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 <code>AsyncSession</code>.</p> <p>\u0427\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442:</p> <ul> <li>\u0412\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0443\u0445\u043e\u0434\u044f\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e, \u043f\u043e\u043a\u0430 \u043e\u043d\u0438 \u0436\u0434\u0443\u0442 \u043e\u0442\u0432\u0435\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u201c\u0437\u0430\u0441\u044b\u043f\u0430\u044e\u0442\u201d \u0438 \u043d\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u0440\u0435\u0441\u0443\u0440\u0441\u044b.</li> <li>\u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u043e\u0442\u0432\u0435\u0442, \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0435\u0433\u043e \u0436\u0434\u0430\u043b\u0430 \u2014 \u0438 \u0432\u0441\u0451 \u044d\u0442\u043e \u0431\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.</li> <li>\u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439: \u043a\u043e\u0433\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442, \u043e\u043d \u043d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u0437\u0430\u0434\u0430\u0447.</li> </ul> <p>\u041f\u043b\u044e\u0441\u044b:</p> <ul> <li>\u041e\u0442\u043b\u0438\u0447\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447.</li> </ul> <p>\u041c\u0438\u043d\u0443\u0441\u044b: </p> <ul> <li>\u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430, \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u044f\u0432\u043d\u043e\u0433\u043e async/await.</li> </ul> <p>\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: <code>5.19 \u0441\u0435\u043a\u0443\u043d\u0434</code></p>"},{"location":"lab2/task2/#multiprocessing","title":"Multiprocessing","text":"<pre><code>def parse_and_save(url):\n    # \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0421\u0412\u041e\u042e \u0441\u0435\u0441\u0441\u0438\u044e\n    session = SessionLocal()\n    resp = requests.get(url, headers={\"User-Agent\": \"Mozilla/5.0\"})\n    soup = BeautifulSoup(resp.text, \"html.parser\")\n    questions = soup.select(\".s-post-summary\")\n\n    for q in questions:\n        title_tag = q.select_one(\".s-post-summary--content-title\")\n        desc_tag  = q.select_one(\".s-post-summary--content-excerpt\")\n        title  = title_tag.text.strip() if title_tag else \"\u0411\u0435\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\"\n        descr  = desc_tag.text.strip()  if desc_tag  else \"\u0411\u0435\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\"\n\n        answers_block = q.select_one(\".s-post-summary--stats-item\")\n        num_tag = answers_block.select_one(\".s-post-summary--stats-item-number\") if answers_block else None\n        num = int(num_tag.text.strip()) if num_tag and num_tag.text.strip().isdigit() else 0\n\n        category_name = \"Answered\" if num &gt; 0 else \"Unanswered\"\n        category = session.query(Category).filter_by(name=category_name).first()\n\n        task = Task(title=title, description=descr, user_id=1)\n        task.categories.append(category)\n        session.add(task)\n        session.commit()\n        print(f\"[PROCESS] {title} \u2192 {category_name}\")\n\n    session.close()\n\ndef main():\n    multiprocessing.set_start_method(\"spawn\")\n    init_db_and_categories()\n    pages = 20\n    urls = [f\"https://stackoverflow.com/questions?tab=newest&amp;page={i}\" for i in range(1, pages+1)]\n\n    start = time()\n    with multiprocessing.Pool(processes=8) as pool:\n        pool.map(parse_and_save, urls)\n    print(f\"[PROCESS] \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time() - start:.2f} \u0441\u0435\u043a\u0443\u043d\u0434\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u041f\u0443\u043b \u0438\u0437 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u043e \u0441\u0432\u043e\u0438\u043c \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u043e\u043c \u0438 \u043f\u0430\u043c\u044f\u0442\u044c\u044e.</p> <p>\u0427\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442:</p> <ul> <li>\u041f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f worker-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b.</li> <li>\u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0434\u0435\u043b\u0430\u0435\u0442 \u0441\u0432\u043e\u0439 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u043f\u0430\u0440\u0441\u0438\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443.</li> <li>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0432 \u0411\u0414 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.</li> </ul> <p>\u041f\u043b\u044e\u0441\u044b:</p> <ul> <li>\u041d\u0435\u0442 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0446\u0438\u0438 \u0437\u0430 GIL \u043f\u0440\u0438 CPU-\u0447\u0430\u0441\u0442\u044f\u0445.</li> </ul> <p>\u041c\u0438\u043d\u0443\u0441\u044b:</p> <ul> <li>Overhead \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.</li> <li>\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u043a \u0411\u0414.</li> </ul> <p>\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: <code>10.79 \u0441\u0435\u043a\u0443\u043d\u0434</code></p>"},{"location":"lab2/task2/#_4","title":"\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430","text":"\u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f (\u0441\u0435\u043a) <code>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439</code> ~21.37 <code>threading</code> ~20.34 <code>asyncio</code> ~5.19 <code>multiprocessing</code> ~10.79"},{"location":"lab2/task2/#_5","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"<ol> <li> <p>AsyncIO (5.19\u202f\u0441) \u2014 \u0441\u0430\u043c\u044b\u0439 \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0447\u0438\u0441\u0442\u043e I/O-bound \u0437\u0430\u0434\u0430\u0447:</p> <ul> <li>\u041d\u0435\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0435 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u044b;</li> <li>\u041d\u0438\u0437\u043a\u0438\u0439 overhead \u043d\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.</li> </ul> </li> <li> <p>Multiprocessing (10.79\u202f\u0441) \u2014 \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442 \u0437\u0430 \u0441\u0447\u0451\u0442 \u043e\u0431\u0445\u043e\u0434\u0430 GIL, \u043d\u043e \u0443\u0441\u0442\u0443\u043f\u0430\u0435\u0442 async \u0438\u0437\u2011\u0437\u0430 \u0437\u0430\u0442\u0440\u0430\u0442 \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u043d\u0438\u0445.</p> </li> <li> <p>Threading (20.34\u202f\u0441) \u2014 \u043f\u043e\u0447\u0442\u0438 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0442\u043e\u043a\u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0442\u044c Python-\u043a\u043e\u0434, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 I/O \u043c\u0430\u043b\u043e \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435, \u0430 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0442 overhead.</p> </li> </ol>"}]}